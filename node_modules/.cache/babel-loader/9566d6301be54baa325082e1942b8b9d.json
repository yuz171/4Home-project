{"ast":null,"code":"// 导入axios\nimport axios from 'axios'; // 1 在 utils 目录中，新建 index.js，在该文件中封装\n// 2 创建并导出获取定位城市的函数 getCurrentCity\n\nexport const getCurrentCity = () => {\n  // 3 判断 localStorage 中是否有定位城市\n  const localCity = JSON.parse(localStorage.getItem('hkzf_city'));\n\n  if (!localCity) {\n    // 4 如果没有，就使用首页中获取定位城市的代码来获取，并且存储到本地存储中，然后返回该城市数据\n    return new Promise((resolve, reject) => {\n      const curCity = new window.BMap.LocalCity();\n      curCity.get(async res => {\n        try {\n          // console.log('当前城市信息：', res)\n          const result = await axios.get(\"http://localhost:8080/area/info?name=\".concat(res.name)); // result.data.body => { label: '上海', value: '' }\n          // 存储到本地存储中\n\n          localStorage.setItem('hkzf_city', JSON.stringify(result.data.body)); // 返回该城市数据\n          // return result.data.body\n\n          resolve(result.data.body);\n        } catch (e) {\n          // 获取定位城市失败\n          reject(e);\n        }\n      });\n    });\n  } // 5 如果有，直接返回本地存储中的城市数据\n  // 注意：因为上面为了处理异步操作，使用了Promise，因此，为了该函数返回值的统一，此处，也应该使用Promise\n  // 因为此处的 Promise 不会失败，所以，此处，只要返回一个成功的Promise即可\n\n\n  return Promise.resolve(localCity);\n};\nexport { API } from './api';\nexport { BASE_URL } from './url'; // 导出 auth 模块中的所有内容\n\nexport * from './auth';\nexport * from './city';","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\utils\\index.js"],"names":["axios","getCurrentCity","localCity","JSON","parse","localStorage","getItem","Promise","resolve","reject","curCity","window","BMap","LocalCity","get","res","result","name","setItem","stringify","data","body","e","API","BASE_URL"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAlB;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACd;AACA,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,SAAhB,EAAhB;AACAH,MAAAA,OAAO,CAACI,GAAR,CAAY,MAAMC,GAAN,IAAa;AACvB,YAAI;AACF;AACA,gBAAMC,MAAM,GAAG,MAAMhB,KAAK,CAACc,GAAN,gDACqBC,GAAG,CAACE,IADzB,EAArB,CAFE,CAKF;AAEA;;AACAZ,UAAAA,YAAY,CAACa,OAAb,CAAqB,WAArB,EAAkCf,IAAI,CAACgB,SAAL,CAAeH,MAAM,CAACI,IAAP,CAAYC,IAA3B,CAAlC,EARE,CASF;AACA;;AACAb,UAAAA,OAAO,CAACQ,MAAM,CAACI,IAAP,CAAYC,IAAb,CAAP;AACD,SAZD,CAYE,OAAOC,CAAP,EAAU;AACV;AACAb,UAAAA,MAAM,CAACa,CAAD,CAAN;AACD;AACF,OAjBD;AAkBD,KApBM,CAAP;AAqBD,GA1BiC,CA4BlC;AACA;AACA;;;AACA,SAAOf,OAAO,CAACC,OAAR,CAAgBN,SAAhB,CAAP;AACD,CAhCM;AAkCP,SAASqB,GAAT,QAAoB,OAApB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CACA;;AACA,cAAc,QAAd;AAEA,cAAc,QAAd","sourcesContent":["// 导入axios\r\nimport axios from 'axios'\r\n\r\n// 1 在 utils 目录中，新建 index.js，在该文件中封装\r\n// 2 创建并导出获取定位城市的函数 getCurrentCity\r\nexport const getCurrentCity = () => {\r\n  // 3 判断 localStorage 中是否有定位城市\r\n  const localCity = JSON.parse(localStorage.getItem('hkzf_city'))\r\n  if (!localCity) {\r\n    // 4 如果没有，就使用首页中获取定位城市的代码来获取，并且存储到本地存储中，然后返回该城市数据\r\n    return new Promise((resolve, reject) => {\r\n      const curCity = new window.BMap.LocalCity()\r\n      curCity.get(async res => {\r\n        try {\r\n          // console.log('当前城市信息：', res)\r\n          const result = await axios.get(\r\n            `http://localhost:8080/area/info?name=${res.name}`\r\n          )\r\n          // result.data.body => { label: '上海', value: '' }\r\n\r\n          // 存储到本地存储中\r\n          localStorage.setItem('hkzf_city', JSON.stringify(result.data.body))\r\n          // 返回该城市数据\r\n          // return result.data.body\r\n          resolve(result.data.body)\r\n        } catch (e) {\r\n          // 获取定位城市失败\r\n          reject(e)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  // 5 如果有，直接返回本地存储中的城市数据\r\n  // 注意：因为上面为了处理异步操作，使用了Promise，因此，为了该函数返回值的统一，此处，也应该使用Promise\r\n  // 因为此处的 Promise 不会失败，所以，此处，只要返回一个成功的Promise即可\r\n  return Promise.resolve(localCity)\r\n}\r\n\r\nexport { API } from './api'\r\nexport { BASE_URL } from './url'\r\n// 导出 auth 模块中的所有内容\r\nexport * from './auth'\r\n\r\nexport * from './city'\r\n"]},"metadata":{},"sourceType":"module"}