{"ast":null,"code":"import _objectSpread from \"E:\\\\react-project\\\\hkzf-mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\react-project\\\\hkzf-mobile\\\\src\\\\pages\\\\HouseList\\\\components\\\\Filter\\\\index.js\";\nimport React, { Component } from 'react'; // 导入 Spring 组件\n\nimport { Spring } from 'react-spring/renderprops';\nimport FilterTitle from '../FilterTitle';\nimport FilterPicker from '../FilterPicker';\nimport FilterMore from '../FilterMore'; // 导入自定义的axios\n\nimport { API } from '../../../../utils/api';\nimport styles from './index.module.css'; // 标题高亮状态\n// true 表示高亮； false 表示不高亮\n\nconst titleSelectedStatus = {\n  area: false,\n  mode: false,\n  price: false,\n  more: false // FilterPicker 和 FilterMore 组件的选中值\n\n};\nconst selectedValues = {\n  area: ['area', 'null'],\n  mode: ['null'],\n  price: ['null'],\n  more: []\n};\nexport default class Filter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      titleSelectedStatus,\n      // 控制 FilterPicker 或 FilterMore 组件的展示或隐藏\n      openType: '',\n      // 所有筛选条件数据\n      filtersData: {\n        // FilterMore\n        roomType: [],\n        oriented: [],\n        floor: [],\n        characteristic: [],\n        // FilterPicker\n        area: {},\n        subway: {},\n        rentType: [],\n        price: []\n      },\n      // 筛选条件的选中值\n      selectedValues\n    };\n\n    this.onTitleClick = type => {\n      // 给 body 添加样式\n      this.htmlBody.className = 'body-fixed';\n      const _this$state = this.state,\n            titleSelectedStatus = _this$state.titleSelectedStatus,\n            selectedValues = _this$state.selectedValues; // 创建新的标题选中状态对象\n\n      const newTitleSelectedStatus = _objectSpread({}, titleSelectedStatus); // 遍历标题选中状态对象\n      // Object.keys() => ['area', 'mode', 'price', 'more']\n\n\n      Object.keys(titleSelectedStatus).forEach(key => {\n        // key 表示数组中的每一项，此处，就是每个标题的 type 值。\n        if (key === type) {\n          // 当前标题\n          newTitleSelectedStatus[type] = true;\n          return;\n        } // 其他标题：\n\n\n        const selectedVal = selectedValues[key];\n\n        if (key === 'area' && (selectedVal.length !== 2 || selectedVal[0] !== 'area')) {\n          // 高亮\n          newTitleSelectedStatus[key] = true;\n        } else if (key === 'mode' && selectedVal[0] !== 'null') {\n          // 高亮\n          newTitleSelectedStatus[key] = true;\n        } else if (key === 'price' && selectedVal[0] !== 'null') {\n          // 高亮\n          newTitleSelectedStatus[key] = true;\n        } else if (key === 'more' && selectedVal.length !== 0) {\n          // 更多选择项 FilterMore 组件\n          newTitleSelectedStatus[key] = true;\n        } else {\n          newTitleSelectedStatus[key] = false;\n        }\n      });\n      this.setState({\n        // 展示对话框\n        openType: type,\n        // 使用新的标题选中状态对象来更新\n        titleSelectedStatus: newTitleSelectedStatus\n      });\n    };\n\n    this.onCancel = type => {\n      this.htmlBody.className = '';\n      const _this$state2 = this.state,\n            titleSelectedStatus = _this$state2.titleSelectedStatus,\n            selectedValues = _this$state2.selectedValues; // 创建新的标题选中状态对象\n\n      const newTitleSelectedStatus = _objectSpread({}, titleSelectedStatus); // 菜单高亮逻辑处理\n\n\n      const selectedVal = selectedValues[type];\n\n      if (type === 'area' && (selectedVal.length !== 2 || selectedVal[0] !== 'area')) {\n        // 高亮\n        newTitleSelectedStatus[type] = true;\n      } else if (type === 'mode' && selectedVal[0] !== 'null') {\n        // 高亮\n        newTitleSelectedStatus[type] = true;\n      } else if (type === 'price' && selectedVal[0] !== 'null') {\n        // 高亮\n        newTitleSelectedStatus[type] = true;\n      } else if (type === 'more' && selectedVal.length !== 0) {\n        // 更多选择项 FilterMore 组件\n        newTitleSelectedStatus[type] = true;\n      } else {\n        newTitleSelectedStatus[type] = false;\n      } // 隐藏对话框\n\n\n      this.setState({\n        openType: '',\n        // 更新菜单高亮状态数据\n        titleSelectedStatus: newTitleSelectedStatus\n      });\n    };\n\n    this.onSave = (type, value) => {\n      this.htmlBody.className = '';\n      const titleSelectedStatus = this.state.titleSelectedStatus; // 创建新的标题选中状态对象\n\n      const newTitleSelectedStatus = _objectSpread({}, titleSelectedStatus); // 菜单高亮逻辑处理\n\n\n      const selectedVal = value;\n\n      if (type === 'area' && (selectedVal.length !== 2 || selectedVal[0] !== 'area')) {\n        // 高亮\n        newTitleSelectedStatus[type] = true;\n      } else if (type === 'mode' && selectedVal[0] !== 'null') {\n        // 高亮\n        newTitleSelectedStatus[type] = true;\n      } else if (type === 'price' && selectedVal[0] !== 'null') {\n        // 高亮\n        newTitleSelectedStatus[type] = true;\n      } else if (type === 'more' && selectedVal.length !== 0) {\n        // 更多选择项 FilterMore 组件\n        newTitleSelectedStatus[type] = true;\n      } else {\n        newTitleSelectedStatus[type] = false;\n      }\n      /* \r\n        组装筛选条件：\r\n          1 在 Filter 组件的 onSave 方法中，根据最新 selectedValues 组装筛选条件数据 filters。\r\n        2 获取区域数据的参数名：area 或 subway（选中值数组的第一个元素）。\r\n        3 获取区域数据的值（以最后一个 value 为准）。\r\n        4 获取方式和租金的值（选中值的第一个元素）。\r\n        5 获取筛选（more）的值（将选中值数组转化为以逗号分隔的字符串）。\r\n          {\r\n          area: 'AREA|67fad918-f2f8-59df', // 或 subway: '...'\r\n          mode: 'true', // 或 'null'\r\n          price: 'PRICE|2000',\r\n          more: 'ORIEN|80795f1a-e32f-feb9,ROOM|d4a692e4-a177-37fd'\r\n        }\r\n      */\n\n\n      const newSelectedValues = _objectSpread({}, this.state.selectedValues, {\n        // 只更新当前 type 对应的选中值\n        [type]: value\n      });\n\n      const area = newSelectedValues.area,\n            mode = newSelectedValues.mode,\n            price = newSelectedValues.price,\n            more = newSelectedValues.more; // 筛选条件数据\n\n      const filters = {}; // 区域\n\n      const areaKey = area[0];\n      let areaValue = 'null';\n\n      if (area.length === 3) {\n        areaValue = area[2] !== 'null' ? area[2] : area[1];\n      }\n\n      filters[areaKey] = areaValue; // 方式和租金\n\n      filters.mode = mode[0];\n      filters.price = price[0]; // 更多筛选条件 more\n\n      filters.more = more.join(','); // console.log(filters)\n      // 调用父组件中的方法，来将筛选数据传递给父组件\n\n      this.props.onFilter(filters); // 隐藏对话框\n\n      this.setState({\n        openType: '',\n        // 更新菜单高亮状态数据\n        titleSelectedStatus: newTitleSelectedStatus,\n        selectedValues: newSelectedValues\n      });\n    };\n  }\n\n  componentDidMount() {\n    // 获取到body\n    this.htmlBody = document.body;\n    this.getFiltersData();\n  } // 封装获取所有筛选条件的方法\n\n\n  async getFiltersData() {\n    // 获取当前定位城市id\n    const _JSON$parse = JSON.parse(localStorage.getItem('hkzf_city')),\n          value = _JSON$parse.value;\n\n    const res = await API.get(\"/houses/condition?id=\".concat(value));\n    this.setState({\n      filtersData: res.data.body\n    });\n  } // 点击标题菜单实现高亮\n  // 注意：this指向的问题！！！\n  // 说明：要实现完整的功能，需要后续的组件配合完成！\n\n\n  // 渲染 FilterPicker 组件的方法\n  renderFilterPicker() {\n    const _this$state3 = this.state,\n          openType = _this$state3.openType,\n          _this$state3$filtersD = _this$state3.filtersData,\n          area = _this$state3$filtersD.area,\n          subway = _this$state3$filtersD.subway,\n          rentType = _this$state3$filtersD.rentType,\n          price = _this$state3$filtersD.price,\n          selectedValues = _this$state3.selectedValues;\n\n    if (openType !== 'area' && openType !== 'mode' && openType !== 'price') {\n      return null;\n    } // 根据 openType 来拿到当前筛选条件数据\n\n\n    let data = [];\n    let cols = 3;\n    let defaultValue = selectedValues[openType];\n\n    switch (openType) {\n      case 'area':\n        // 获取到区域数据\n        data = [area, subway];\n        cols = 3;\n        break;\n\n      case 'mode':\n        data = rentType;\n        cols = 1;\n        break;\n\n      case 'price':\n        data = price;\n        cols = 1;\n        break;\n\n      default:\n        break;\n    }\n\n    return React.createElement(FilterPicker, {\n      key: openType,\n      onCancel: this.onCancel,\n      onSave: this.onSave,\n      data: data,\n      cols: cols,\n      type: openType,\n      defaultValue: defaultValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    });\n  } // 渲染 FilterMore 组件\n\n\n  renderFilterMore() {\n    const _this$state4 = this.state,\n          openType = _this$state4.openType,\n          selectedValues = _this$state4.selectedValues,\n          _this$state4$filtersD = _this$state4.filtersData,\n          roomType = _this$state4$filtersD.roomType,\n          oriented = _this$state4$filtersD.oriented,\n          floor = _this$state4$filtersD.floor,\n          characteristic = _this$state4$filtersD.characteristic; // 移除 return null\n\n    const data = {\n      roomType,\n      oriented,\n      floor,\n      characteristic\n    };\n    const defaultValue = selectedValues.more;\n    return React.createElement(FilterMore, {\n      data: data,\n      type: openType,\n      onSave: this.onSave,\n      onCancel: this.onCancel,\n      defaultValue: defaultValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    });\n  } // 渲染遮罩层div\n\n\n  renderMask() {\n    const openType = this.state.openType; // 遮罩层是否隐藏\n\n    const isHide = openType === 'more' || openType === '';\n    return React.createElement(Spring, {\n      from: {\n        opacity: 0\n      },\n      to: {\n        opacity: isHide ? 0 : 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, props => {\n      // 说明遮罩层已经完成动画效果，隐藏了\n      if (props.opacity === 0) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        style: props,\n        className: styles.mask,\n        onClick: () => this.onCancel(openType),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    const titleSelectedStatus = this.state.titleSelectedStatus;\n    return React.createElement(\"div\", {\n      className: styles.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, this.renderMask(), React.createElement(\"div\", {\n      className: styles.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(FilterTitle, {\n      titleSelectedStatus: titleSelectedStatus,\n      onClick: this.onTitleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), this.renderFilterPicker(), this.renderFilterMore()));\n  }\n\n}","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\pages\\HouseList\\components\\Filter\\index.js"],"names":["React","Component","Spring","FilterTitle","FilterPicker","FilterMore","API","styles","titleSelectedStatus","area","mode","price","more","selectedValues","Filter","state","openType","filtersData","roomType","oriented","floor","characteristic","subway","rentType","onTitleClick","type","htmlBody","className","newTitleSelectedStatus","Object","keys","forEach","key","selectedVal","length","setState","onCancel","onSave","value","newSelectedValues","filters","areaKey","areaValue","join","props","onFilter","componentDidMount","document","body","getFiltersData","JSON","parse","localStorage","getItem","res","get","data","renderFilterPicker","cols","defaultValue","renderFilterMore","renderMask","isHide","opacity","mask","render","root","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\n// 导入 Spring 组件\r\nimport { Spring } from 'react-spring/renderprops'\r\n\r\nimport FilterTitle from '../FilterTitle'\r\nimport FilterPicker from '../FilterPicker'\r\nimport FilterMore from '../FilterMore'\r\n\r\n// 导入自定义的axios\r\nimport { API } from '../../../../utils/api'\r\n\r\nimport styles from './index.module.css'\r\n\r\n// 标题高亮状态\r\n// true 表示高亮； false 表示不高亮\r\nconst titleSelectedStatus = {\r\n  area: false,\r\n  mode: false,\r\n  price: false,\r\n  more: false\r\n}\r\n\r\n// FilterPicker 和 FilterMore 组件的选中值\r\nconst selectedValues = {\r\n  area: ['area', 'null'],\r\n  mode: ['null'],\r\n  price: ['null'],\r\n  more: []\r\n}\r\n\r\nexport default class Filter extends Component {\r\n  state = {\r\n    titleSelectedStatus,\r\n    // 控制 FilterPicker 或 FilterMore 组件的展示或隐藏\r\n    openType: '',\r\n    // 所有筛选条件数据\r\n    filtersData: {\r\n      // FilterMore\r\n      roomType: [],\r\n      oriented: [],\r\n      floor: [],\r\n      characteristic: [],\r\n      // FilterPicker\r\n      area: {},\r\n      subway: {},\r\n      rentType: [],\r\n      price: []\r\n    },\r\n    // 筛选条件的选中值\r\n    selectedValues\r\n  }\r\n\r\n  componentDidMount() {\r\n    // 获取到body\r\n    this.htmlBody = document.body\r\n\r\n    this.getFiltersData()\r\n  }\r\n\r\n  // 封装获取所有筛选条件的方法\r\n  async getFiltersData() {\r\n    // 获取当前定位城市id\r\n    const { value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n    const res = await API.get(`/houses/condition?id=${value}`)\r\n\r\n    this.setState({\r\n      filtersData: res.data.body\r\n    })\r\n  }\r\n\r\n  // 点击标题菜单实现高亮\r\n  // 注意：this指向的问题！！！\r\n  // 说明：要实现完整的功能，需要后续的组件配合完成！\r\n  onTitleClick = type => {\r\n    // 给 body 添加样式\r\n    this.htmlBody.className = 'body-fixed'\r\n\r\n    const { titleSelectedStatus, selectedValues } = this.state\r\n    // 创建新的标题选中状态对象\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n\r\n    // 遍历标题选中状态对象\r\n    // Object.keys() => ['area', 'mode', 'price', 'more']\r\n    Object.keys(titleSelectedStatus).forEach(key => {\r\n      // key 表示数组中的每一项，此处，就是每个标题的 type 值。\r\n      if (key === type) {\r\n        // 当前标题\r\n        newTitleSelectedStatus[type] = true\r\n        return\r\n      }\r\n\r\n      // 其他标题：\r\n      const selectedVal = selectedValues[key]\r\n      if (\r\n        key === 'area' &&\r\n        (selectedVal.length !== 2 || selectedVal[0] !== 'area')\r\n      ) {\r\n        // 高亮\r\n        newTitleSelectedStatus[key] = true\r\n      } else if (key === 'mode' && selectedVal[0] !== 'null') {\r\n        // 高亮\r\n        newTitleSelectedStatus[key] = true\r\n      } else if (key === 'price' && selectedVal[0] !== 'null') {\r\n        // 高亮\r\n        newTitleSelectedStatus[key] = true\r\n      } else if (key === 'more' && selectedVal.length !== 0) {\r\n        // 更多选择项 FilterMore 组件\r\n        newTitleSelectedStatus[key] = true\r\n      } else {\r\n        newTitleSelectedStatus[key] = false\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      // 展示对话框\r\n      openType: type,\r\n      // 使用新的标题选中状态对象来更新\r\n      titleSelectedStatus: newTitleSelectedStatus\r\n    })\r\n  }\r\n\r\n  // 取消（隐藏对话框）\r\n  onCancel = type => {\r\n    this.htmlBody.className = ''\r\n\r\n    const { titleSelectedStatus, selectedValues } = this.state\r\n    // 创建新的标题选中状态对象\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n\r\n    // 菜单高亮逻辑处理\r\n    const selectedVal = selectedValues[type]\r\n    if (\r\n      type === 'area' &&\r\n      (selectedVal.length !== 2 || selectedVal[0] !== 'area')\r\n    ) {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'mode' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'price' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'more' && selectedVal.length !== 0) {\r\n      // 更多选择项 FilterMore 组件\r\n      newTitleSelectedStatus[type] = true\r\n    } else {\r\n      newTitleSelectedStatus[type] = false\r\n    }\r\n\r\n    // 隐藏对话框\r\n    this.setState({\r\n      openType: '',\r\n\r\n      // 更新菜单高亮状态数据\r\n      titleSelectedStatus: newTitleSelectedStatus\r\n    })\r\n  }\r\n\r\n  // 确定（隐藏对话框）\r\n  onSave = (type, value) => {\r\n    this.htmlBody.className = ''\r\n\r\n    const { titleSelectedStatus } = this.state\r\n    // 创建新的标题选中状态对象\r\n    const newTitleSelectedStatus = { ...titleSelectedStatus }\r\n\r\n    // 菜单高亮逻辑处理\r\n    const selectedVal = value\r\n    if (\r\n      type === 'area' &&\r\n      (selectedVal.length !== 2 || selectedVal[0] !== 'area')\r\n    ) {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'mode' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'price' && selectedVal[0] !== 'null') {\r\n      // 高亮\r\n      newTitleSelectedStatus[type] = true\r\n    } else if (type === 'more' && selectedVal.length !== 0) {\r\n      // 更多选择项 FilterMore 组件\r\n      newTitleSelectedStatus[type] = true\r\n    } else {\r\n      newTitleSelectedStatus[type] = false\r\n    }\r\n\r\n    /* \r\n      组装筛选条件：\r\n\r\n      1 在 Filter 组件的 onSave 方法中，根据最新 selectedValues 组装筛选条件数据 filters。\r\n      2 获取区域数据的参数名：area 或 subway（选中值数组的第一个元素）。\r\n      3 获取区域数据的值（以最后一个 value 为准）。\r\n      4 获取方式和租金的值（选中值的第一个元素）。\r\n      5 获取筛选（more）的值（将选中值数组转化为以逗号分隔的字符串）。\r\n\r\n      {\r\n        area: 'AREA|67fad918-f2f8-59df', // 或 subway: '...'\r\n        mode: 'true', // 或 'null'\r\n        price: 'PRICE|2000',\r\n        more: 'ORIEN|80795f1a-e32f-feb9,ROOM|d4a692e4-a177-37fd'\r\n      }\r\n    */\r\n\r\n    const newSelectedValues = {\r\n      ...this.state.selectedValues,\r\n      // 只更新当前 type 对应的选中值\r\n      [type]: value\r\n    }\r\n\r\n    const { area, mode, price, more } = newSelectedValues\r\n\r\n    // 筛选条件数据\r\n    const filters = {}\r\n\r\n    // 区域\r\n    const areaKey = area[0]\r\n    let areaValue = 'null'\r\n    if (area.length === 3) {\r\n      areaValue = area[2] !== 'null' ? area[2] : area[1]\r\n    }\r\n    filters[areaKey] = areaValue\r\n\r\n    // 方式和租金\r\n    filters.mode = mode[0]\r\n    filters.price = price[0]\r\n\r\n    // 更多筛选条件 more\r\n    filters.more = more.join(',')\r\n\r\n    // console.log(filters)\r\n\r\n    // 调用父组件中的方法，来将筛选数据传递给父组件\r\n    this.props.onFilter(filters)\r\n\r\n    // 隐藏对话框\r\n    this.setState({\r\n      openType: '',\r\n\r\n      // 更新菜单高亮状态数据\r\n      titleSelectedStatus: newTitleSelectedStatus,\r\n\r\n      selectedValues: newSelectedValues\r\n    })\r\n  }\r\n\r\n  // 渲染 FilterPicker 组件的方法\r\n  renderFilterPicker() {\r\n    const {\r\n      openType,\r\n      filtersData: { area, subway, rentType, price },\r\n      selectedValues\r\n    } = this.state\r\n\r\n    if (openType !== 'area' && openType !== 'mode' && openType !== 'price') {\r\n      return null\r\n    }\r\n\r\n    // 根据 openType 来拿到当前筛选条件数据\r\n    let data = []\r\n    let cols = 3\r\n    let defaultValue = selectedValues[openType]\r\n    switch (openType) {\r\n      case 'area':\r\n        // 获取到区域数据\r\n        data = [area, subway]\r\n        cols = 3\r\n        break\r\n      case 'mode':\r\n        data = rentType\r\n        cols = 1\r\n        break\r\n      case 'price':\r\n        data = price\r\n        cols = 1\r\n        break\r\n      default:\r\n        break\r\n    }\r\n\r\n    return (\r\n      <FilterPicker\r\n        key={openType}\r\n        onCancel={this.onCancel}\r\n        onSave={this.onSave}\r\n        data={data}\r\n        cols={cols}\r\n        type={openType}\r\n        defaultValue={defaultValue}\r\n      />\r\n    )\r\n  }\r\n\r\n  // 渲染 FilterMore 组件\r\n  renderFilterMore() {\r\n    const {\r\n      openType,\r\n      selectedValues,\r\n      filtersData: { roomType, oriented, floor, characteristic }\r\n    } = this.state\r\n\r\n    // 移除 return null\r\n\r\n    const data = {\r\n      roomType,\r\n      oriented,\r\n      floor,\r\n      characteristic\r\n    }\r\n\r\n    const defaultValue = selectedValues.more\r\n\r\n    return (\r\n      <FilterMore\r\n        data={data}\r\n        type={openType}\r\n        onSave={this.onSave}\r\n        onCancel={this.onCancel}\r\n        defaultValue={defaultValue}\r\n      />\r\n    )\r\n  }\r\n\r\n  // 渲染遮罩层div\r\n  renderMask() {\r\n    const { openType } = this.state\r\n\r\n    // 遮罩层是否隐藏\r\n    const isHide = openType === 'more' || openType === ''\r\n\r\n    return (\r\n      <Spring from={{ opacity: 0 }} to={{ opacity: isHide ? 0 : 1 }}>\r\n        {props => {\r\n          // 说明遮罩层已经完成动画效果，隐藏了\r\n          if (props.opacity === 0) {\r\n            return null\r\n          }\r\n\r\n          return (\r\n            <div\r\n              style={props}\r\n              className={styles.mask}\r\n              onClick={() => this.onCancel(openType)}\r\n            />\r\n          )\r\n        }}\r\n      </Spring>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { titleSelectedStatus } = this.state\r\n\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 前三个菜单的遮罩层 */}\r\n        {this.renderMask()}\r\n\r\n        <div className={styles.content}>\r\n          {/* 标题栏 */}\r\n          <FilterTitle\r\n            titleSelectedStatus={titleSelectedStatus}\r\n            onClick={this.onTitleClick}\r\n          />\r\n\r\n          {/* 前三个菜单对应的内容： */}\r\n          {this.renderFilterPicker()}\r\n\r\n          {/* 最后一个菜单对应的内容： */}\r\n          {this.renderFilterMore()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}