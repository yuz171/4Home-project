{"ast":null,"code":"import \"antd-mobile/lib/toast/style/css\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"E:\\\\react-project\\\\hkzf-mobile\\\\src\\\\pages\\\\CityList\\\\index.js\";\nimport React from 'react';\nimport axios from 'axios';\n// 导入 List 组件\nimport { List, AutoSizer } from 'react-virtualized'; // 导入 utils 中获取当前定位城市的方法\n\nimport { getCurrentCity } from '../../utils'; // 导入 NavHeader 组件\n\nimport NavHeader from '../../components/NavHeader';\nimport './index.scss'; // 导入 CSSModules 的样式文件\n// import styles from './index.module.css'\n// console.log(styles)\n// 数据格式化的方法\n// list: [{}, {}]\n\nconst formatCityData = list => {\n  const cityList = {}; // const cityIndex = []\n  // 1 遍历list数组\n\n  list.forEach(item => {\n    // 2 获取每一个城市的首字母\n    const first = item.short.substr(0, 1); // 3 判断 cityList 中是否有该分类\n\n    if (cityList[first]) {\n      // 4 如果有，直接往该分类中push数据\n      // cityList[first] => [{}, {}]\n      cityList[first].push(item);\n    } else {\n      // 5 如果没有，就先创建一个数组，然后，把当前城市信息添加到数组中\n      cityList[first] = [item];\n    }\n  }); // 获取索引数据\n\n  const cityIndex = Object.keys(cityList).sort();\n  return {\n    cityList,\n    cityIndex\n  };\n}; // 索引（A、B等）的高度\n\n\nconst TITLE_HEIGHT = 36; // 每个城市名称的高度\n\nconst NAME_HEIGHT = 50; // 封装处理字母索引的方法\n\nconst formatCityIndex = letter => {\n  switch (letter) {\n    case '#':\n      return '当前定位';\n\n    case 'hot':\n      return '热门城市';\n\n    default:\n      return letter.toUpperCase();\n  }\n}; // 有房源的城市\n\n\nconst HOUSE_CITY = ['北京', '上海', '广州', '深圳'];\nexport default class CityList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.rowRenderer = ({\n      key,\n      // Unique key within array of rows\n      index,\n      // 索引号\n      isScrolling,\n      // 当前项是否正在滚动中\n      isVisible,\n      // 当前项在 List 中是可见的\n      style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\n\n    }) => {\n      // 获取每一行的字母索引\n      const _this$state = this.state,\n            cityIndex = _this$state.cityIndex,\n            cityList = _this$state.cityList;\n      const letter = cityIndex[index]; // 获取指定字母索引下的城市列表数据\n      // console.log(cityList[letter])\n\n      return React.createElement(\"div\", {\n        key: key,\n        style: style,\n        className: \"city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, formatCityIndex(letter)), cityList[letter].map(item => React.createElement(\"div\", {\n        className: \"name\",\n        key: item.value,\n        onClick: () => this.changeCity(item),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, item.label)));\n    };\n\n    this.getRowHeight = ({\n      index\n    }) => {\n      // 索引标题高度 + 城市数量 * 城市名称的高度\n      // TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\n      const _this$state2 = this.state,\n            cityList = _this$state2.cityList,\n            cityIndex = _this$state2.cityIndex;\n      return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT;\n    };\n\n    this.onRowsRendered = ({\n      startIndex\n    }) => {\n      // console.log('startIndex：', startIndex)\n      if (this.state.activeIndex !== startIndex) {\n        this.setState({\n          activeIndex: startIndex\n        });\n      }\n    };\n\n    this.state = {\n      cityList: {},\n      cityIndex: [],\n      // 指定右侧字母索引列表高亮的索引号\n      activeIndex: 0 // 创建ref对象\n\n    };\n    this.cityListComponent = React.createRef();\n  }\n\n  async componentDidMount() {\n    await this.getCityList(); // 调用 measureAllRows，提前计算 List 中每一行的高度，实现 scrollToRow 的精确跳转\n\n    this.cityListComponent.current.measureAllRows();\n  } // 获取城市列表数据的方法\n\n\n  async getCityList() {\n    const res = await axios.get('http://localhost:8080/area/city?level=1');\n\n    const _formatCityData = formatCityData(res.data.body),\n          cityList = _formatCityData.cityList,\n          cityIndex = _formatCityData.cityIndex; // 获取热门城市数据\n\n\n    const hotRes = await axios.get('http://localhost:8080/area/hot');\n    cityList['hot'] = hotRes.data.body;\n    cityIndex.unshift('hot'); // 获取当前定位城市\n\n    const curCity = await getCurrentCity();\n    cityList['#'] = [curCity];\n    cityIndex.unshift('#'); // console.log(cityList, cityIndex, curCity)\n\n    this.setState({\n      cityList,\n      cityIndex\n    });\n  }\n\n  changeCity({\n    label,\n    value\n  }) {\n    if (HOUSE_CITY.indexOf(label) > -1) {\n      // 有\n      localStorage.setItem('hkzf_city', JSON.stringify({\n        label,\n        value\n      }));\n      this.props.history.go(-1);\n    } else {\n      _Toast.info('该城市暂无房源数据', 1, null, false);\n    }\n  } // List组件渲染每一行的方法：\n\n\n  // 封装渲染右侧索引列表的方法\n  renderCityIndex() {\n    // 获取到 cityIndex，并遍历其，实现渲染\n    const _this$state3 = this.state,\n          cityIndex = _this$state3.cityIndex,\n          activeIndex = _this$state3.activeIndex;\n    return cityIndex.map((item, index) => React.createElement(\"li\", {\n      className: \"city-index-item\",\n      key: item,\n      onClick: () => {\n        // console.log('当前索引号：', index)\n        this.cityListComponent.current.scrollToRow(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: activeIndex === index ? 'index-active' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, item === 'hot' ? '热' : item.toUpperCase())));\n  } // 用于获取List组件中渲染行的信息\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"citylist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(NavHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"\\u57CE\\u5E02\\u9009\\u62E9\"), React.createElement(AutoSizer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, ({\n      width,\n      height\n    }) => React.createElement(List, {\n      ref: this.cityListComponent,\n      width: width,\n      height: height,\n      rowCount: this.state.cityIndex.length,\n      rowHeight: this.getRowHeight,\n      rowRenderer: this.rowRenderer,\n      onRowsRendered: this.onRowsRendered,\n      scrollToAlignment: \"start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      className: \"city-index\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.renderCityIndex()));\n  }\n\n}","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\pages\\CityList\\index.js"],"names":["React","axios","List","AutoSizer","getCurrentCity","NavHeader","formatCityData","list","cityList","forEach","item","first","short","substr","push","cityIndex","Object","keys","sort","TITLE_HEIGHT","NAME_HEIGHT","formatCityIndex","letter","toUpperCase","HOUSE_CITY","CityList","Component","constructor","props","rowRenderer","key","index","isScrolling","isVisible","style","state","map","value","changeCity","label","getRowHeight","length","onRowsRendered","startIndex","activeIndex","setState","cityListComponent","createRef","componentDidMount","getCityList","current","measureAllRows","res","get","data","body","hotRes","unshift","curCity","indexOf","localStorage","setItem","JSON","stringify","history","go","info","renderCityIndex","scrollToRow","render","width","height"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport axios from 'axios'\r\nimport { Toast } from 'antd-mobile'\r\n\r\n// 导入 List 组件\r\nimport { List, AutoSizer } from 'react-virtualized'\r\n\r\n// 导入 utils 中获取当前定位城市的方法\r\nimport { getCurrentCity } from '../../utils'\r\n\r\n// 导入 NavHeader 组件\r\nimport NavHeader from '../../components/NavHeader'\r\n\r\nimport './index.scss'\r\n\r\n// 导入 CSSModules 的样式文件\r\n// import styles from './index.module.css'\r\n// console.log(styles)\r\n\r\n// 数据格式化的方法\r\n// list: [{}, {}]\r\nconst formatCityData = list => {\r\n  const cityList = {}\r\n  // const cityIndex = []\r\n\r\n  // 1 遍历list数组\r\n  list.forEach(item => {\r\n    // 2 获取每一个城市的首字母\r\n    const first = item.short.substr(0, 1)\r\n    // 3 判断 cityList 中是否有该分类\r\n    if (cityList[first]) {\r\n      // 4 如果有，直接往该分类中push数据\r\n      // cityList[first] => [{}, {}]\r\n      cityList[first].push(item)\r\n    } else {\r\n      // 5 如果没有，就先创建一个数组，然后，把当前城市信息添加到数组中\r\n      cityList[first] = [item]\r\n    }\r\n  })\r\n\r\n  // 获取索引数据\r\n  const cityIndex = Object.keys(cityList).sort()\r\n\r\n  return {\r\n    cityList,\r\n    cityIndex\r\n  }\r\n}\r\n\r\n// 索引（A、B等）的高度\r\nconst TITLE_HEIGHT = 36\r\n// 每个城市名称的高度\r\nconst NAME_HEIGHT = 50\r\n\r\n// 封装处理字母索引的方法\r\nconst formatCityIndex = letter => {\r\n  switch (letter) {\r\n    case '#':\r\n      return '当前定位'\r\n    case 'hot':\r\n      return '热门城市'\r\n    default:\r\n      return letter.toUpperCase()\r\n  }\r\n}\r\n\r\n// 有房源的城市\r\nconst HOUSE_CITY = ['北京', '上海', '广州', '深圳']\r\n\r\nexport default class CityList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      cityList: {},\r\n      cityIndex: [],\r\n      // 指定右侧字母索引列表高亮的索引号\r\n      activeIndex: 0\r\n    }\r\n\r\n    // 创建ref对象\r\n    this.cityListComponent = React.createRef()\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getCityList()\r\n\r\n    // 调用 measureAllRows，提前计算 List 中每一行的高度，实现 scrollToRow 的精确跳转\r\n    this.cityListComponent.current.measureAllRows()\r\n  }\r\n\r\n  // 获取城市列表数据的方法\r\n  async getCityList() {\r\n    const res = await axios.get('http://localhost:8080/area/city?level=1')\r\n    const { cityList, cityIndex } = formatCityData(res.data.body)\r\n\r\n    // 获取热门城市数据\r\n    const hotRes = await axios.get('http://localhost:8080/area/hot')\r\n    cityList['hot'] = hotRes.data.body\r\n    cityIndex.unshift('hot')\r\n\r\n    // 获取当前定位城市\r\n    const curCity = await getCurrentCity()\r\n    cityList['#'] = [curCity]\r\n    cityIndex.unshift('#')\r\n\r\n    // console.log(cityList, cityIndex, curCity)\r\n    this.setState({\r\n      cityList,\r\n      cityIndex\r\n    })\r\n  }\r\n\r\n  changeCity({ label, value }) {\r\n    if (HOUSE_CITY.indexOf(label) > -1) {\r\n      // 有\r\n      localStorage.setItem('hkzf_city', JSON.stringify({ label, value }))\r\n      this.props.history.go(-1)\r\n    } else {\r\n      Toast.info('该城市暂无房源数据', 1, null, false)\r\n    }\r\n  }\r\n\r\n  // List组件渲染每一行的方法：\r\n  rowRenderer = ({\r\n    key, // Unique key within array of rows\r\n    index, // 索引号\r\n    isScrolling, // 当前项是否正在滚动中\r\n    isVisible, // 当前项在 List 中是可见的\r\n    style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\r\n  }) => {\r\n    // 获取每一行的字母索引\r\n    const { cityIndex, cityList } = this.state\r\n    const letter = cityIndex[index]\r\n\r\n    // 获取指定字母索引下的城市列表数据\r\n    // console.log(cityList[letter])\r\n\r\n    return (\r\n      <div key={key} style={style} className=\"city\">\r\n        <div className=\"title\">{formatCityIndex(letter)}</div>\r\n        {cityList[letter].map(item => (\r\n          <div\r\n            className=\"name\"\r\n            key={item.value}\r\n            onClick={() => this.changeCity(item)}\r\n          >\r\n            {item.label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 创建动态计算每一行高度的方法\r\n  getRowHeight = ({ index }) => {\r\n    // 索引标题高度 + 城市数量 * 城市名称的高度\r\n    // TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n    const { cityList, cityIndex } = this.state\r\n    return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n  }\r\n\r\n  // 封装渲染右侧索引列表的方法\r\n  renderCityIndex() {\r\n    // 获取到 cityIndex，并遍历其，实现渲染\r\n    const { cityIndex, activeIndex } = this.state\r\n    return cityIndex.map((item, index) => (\r\n      <li\r\n        className=\"city-index-item\"\r\n        key={item}\r\n        onClick={() => {\r\n          // console.log('当前索引号：', index)\r\n          this.cityListComponent.current.scrollToRow(index)\r\n        }}\r\n      >\r\n        <span className={activeIndex === index ? 'index-active' : ''}>\r\n          {item === 'hot' ? '热' : item.toUpperCase()}\r\n        </span>\r\n      </li>\r\n    ))\r\n  }\r\n\r\n  // 用于获取List组件中渲染行的信息\r\n  onRowsRendered = ({ startIndex }) => {\r\n    // console.log('startIndex：', startIndex)\r\n    if (this.state.activeIndex !== startIndex) {\r\n      this.setState({\r\n        activeIndex: startIndex\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"citylist\">\r\n        {/* 顶部导航栏 */}\r\n        <NavHeader>城市选择</NavHeader>\r\n\r\n        {/* 城市列表 */}\r\n        <AutoSizer>\r\n          {({ width, height }) => (\r\n            <List\r\n              ref={this.cityListComponent}\r\n              width={width}\r\n              height={height}\r\n              rowCount={this.state.cityIndex.length}\r\n              rowHeight={this.getRowHeight}\r\n              rowRenderer={this.rowRenderer}\r\n              onRowsRendered={this.onRowsRendered}\r\n              scrollToAlignment=\"start\"\r\n            />\r\n          )}\r\n        </AutoSizer>\r\n\r\n        {/* 右侧索引列表 */}\r\n        <ul className=\"city-index\">{this.renderCityIndex()}</ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}