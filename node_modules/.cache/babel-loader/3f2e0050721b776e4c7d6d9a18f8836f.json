{"ast":null,"code":"import axios from 'axios';\nimport { BASE_URL } from './url';\nimport { getToken, removeToken } from './auth'; // 创建axios示例\n\nconst API = axios.create({\n  baseURL: BASE_URL\n});\n/* \r\n  1 在 api.js 中，添加请求拦截器。\r\n  2 获取到当前请求的接口路径（url）。\r\n  3 判断接口路径，是否是以 /user 开头，并且不是登录或注册接口（只给需要的接口添加请求头）。\r\n  4 如果是，就添加请求头 Authorization。\r\n  5 添加响应拦截器。\r\n  6 判断返回值中的状态码。\r\n  7 如果是 400，表示 token 超时或异常，直接移除 token。\r\n*/\n// 添加请求拦截器\n\nAPI.interceptors.request.use(config => {\n  // console.log(config, config.url)\n  const url = config.url;\n\n  if (url.startsWith('/user') && !url.startsWith('/user/login') && !url.startsWith('/user/registered')) {\n    // 添加请求头\n    config.headers.Authorization = getToken();\n  }\n\n  return config;\n}); // 添加响应拦截器\n\nAPI.interceptors.response.use(response => {\n  // console.log(response)\n  const status = response.data.status;\n\n  if (status === 400) {\n    // 此时，说明 token 失效，直接移除 token 即可\n    removeToken();\n  }\n\n  return response;\n});\nexport { API };","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\utils\\api.js"],"names":["axios","BASE_URL","getToken","removeToken","API","create","baseURL","interceptors","request","use","config","url","startsWith","headers","Authorization","response","status","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,QAAtC,C,CAEA;;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAEL;AADc,CAAb,CAAZ;AAIA;;;;;;;;;AAUA;;AACAG,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6BC,MAAM,IAAI;AACrC;AADqC,QAE7BC,GAF6B,GAErBD,MAFqB,CAE7BC,GAF6B;;AAGrC,MACEA,GAAG,CAACC,UAAJ,CAAe,OAAf,KACA,CAACD,GAAG,CAACC,UAAJ,CAAe,aAAf,CADD,IAEA,CAACD,GAAG,CAACC,UAAJ,CAAe,kBAAf,CAHH,EAIE;AACA;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BZ,QAAQ,EAAvC;AACD;;AACD,SAAOQ,MAAP;AACD,CAZD,E,CAcA;;AACAN,GAAG,CAACG,YAAJ,CAAiBQ,QAAjB,CAA0BN,GAA1B,CAA8BM,QAAQ,IAAI;AACxC;AADwC,QAEhCC,MAFgC,GAErBD,QAAQ,CAACE,IAFY,CAEhCD,MAFgC;;AAGxC,MAAIA,MAAM,KAAK,GAAf,EAAoB;AAClB;AACAb,IAAAA,WAAW;AACZ;;AACD,SAAOY,QAAP;AACD,CARD;AAUA,SAASX,GAAT","sourcesContent":["import axios from 'axios'\r\nimport { BASE_URL } from './url'\r\n\r\nimport { getToken, removeToken } from './auth'\r\n\r\n// 创建axios示例\r\nconst API = axios.create({\r\n  baseURL: BASE_URL\r\n})\r\n\r\n/* \r\n  1 在 api.js 中，添加请求拦截器。\r\n  2 获取到当前请求的接口路径（url）。\r\n  3 判断接口路径，是否是以 /user 开头，并且不是登录或注册接口（只给需要的接口添加请求头）。\r\n  4 如果是，就添加请求头 Authorization。\r\n  5 添加响应拦截器。\r\n  6 判断返回值中的状态码。\r\n  7 如果是 400，表示 token 超时或异常，直接移除 token。\r\n*/\r\n\r\n// 添加请求拦截器\r\nAPI.interceptors.request.use(config => {\r\n  // console.log(config, config.url)\r\n  const { url } = config\r\n  if (\r\n    url.startsWith('/user') &&\r\n    !url.startsWith('/user/login') &&\r\n    !url.startsWith('/user/registered')\r\n  ) {\r\n    // 添加请求头\r\n    config.headers.Authorization = getToken()\r\n  }\r\n  return config\r\n})\r\n\r\n// 添加响应拦截器\r\nAPI.interceptors.response.use(response => {\r\n  // console.log(response)\r\n  const { status } = response.data\r\n  if (status === 400) {\r\n    // 此时，说明 token 失效，直接移除 token 即可\r\n    removeToken()\r\n  }\r\n  return response\r\n})\r\n\r\nexport { API }\r\n"]},"metadata":{},"sourceType":"module"}