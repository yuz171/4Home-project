{"ast":null,"code":"import _objectWithoutProperties from \"E:\\\\react-project\\\\hkzf-mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\react-project\\\\hkzf-mobile\\\\src\\\\components\\\\AuthRoute\\\\index.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isAuth } from '../../utils';\n/* \r\n  封装 AuthRoute 鉴权路由组件：\r\n\r\n  1 在 components 目录中创建 AuthRoute/index.js 文件。\r\n  2 创建组件 AuthRoute 并导出。\r\n  3 在 AuthRoute 组件中返回 Route 组件（在 Route 基础上做了一层包装，用于实现自定义功能）。\r\n  4 给 Route 组件，添加 render 方法，指定该组件要渲染的内容（类似于 component 属性）。\r\n  5 在 render 方法中，调用 isAuth() 判断是否登录。\r\n  6 如果登录了，就渲染当前组件（通过参数 component 获取到要渲染的组件，需要重命名）。\r\n  7 如果没有登录，就重定向到登录页面，并且指定登录成功后要跳转到的页面路径。\r\n  8 将 AuthRoute 组件接收到的 props 原样传递给 Route 组件（保证与 Route 组件使用方式相同）。\r\n  9 使用 AuthRoute 组件配置路由规则，验证能否实现页面的登录访问控制。\r\n*/\n// <AuthRoute path=\"...\" component={...}></AuthRoute>\n\nconst AuthRoute = (_ref) => {\n  let Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: props => {\n      const isLogin = isAuth();\n\n      if (isLogin) {\n        // 已登录\n        // 将 props 传递给组件，组件中才能获取到路由相关信息\n        return React.createElement(Component, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }));\n      } else {\n        // 未登录\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nexport default AuthRoute;","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\components\\AuthRoute\\index.js"],"names":["React","Route","Redirect","isAuth","AuthRoute","Component","component","rest","props","isLogin","pathname","state","from","location"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;;;;;;;;;;;;;AAcA;;AACA,MAAMC,SAAS,GAAG,UAAuC;AAAA,MAAzBC,SAAyB,QAApCC,SAAoC;AAAA,MAAXC,IAAW;;AACvD,SACE,oBAAC,KAAD,oBACMA,IADN;AAEE,IAAA,MAAM,EAAEC,KAAK,IAAI;AACf,YAAMC,OAAO,GAAGN,MAAM,EAAtB;;AAEA,UAAIM,OAAJ,EAAa;AACX;AACA;AACA,eAAO,oBAAC,SAAD,oBAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OAJD,MAIO;AACL;AACA,eACE,oBAAC,QAAD;AACE,UAAA,EAAE,EAAE;AACFE,YAAAA,QAAQ,EAAE,QADR;AAEFC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAEJ,KAAK,CAACK;AADP;AAFL,WADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;AACF,KAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AA0BD,CA3BD;;AA6BA,eAAeT,SAAf","sourcesContent":["import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { isAuth } from '../../utils'\r\n\r\n/* \r\n  封装 AuthRoute 鉴权路由组件：\r\n\r\n  1 在 components 目录中创建 AuthRoute/index.js 文件。\r\n  2 创建组件 AuthRoute 并导出。\r\n  3 在 AuthRoute 组件中返回 Route 组件（在 Route 基础上做了一层包装，用于实现自定义功能）。\r\n  4 给 Route 组件，添加 render 方法，指定该组件要渲染的内容（类似于 component 属性）。\r\n  5 在 render 方法中，调用 isAuth() 判断是否登录。\r\n  6 如果登录了，就渲染当前组件（通过参数 component 获取到要渲染的组件，需要重命名）。\r\n  7 如果没有登录，就重定向到登录页面，并且指定登录成功后要跳转到的页面路径。\r\n  8 将 AuthRoute 组件接收到的 props 原样传递给 Route 组件（保证与 Route 组件使用方式相同）。\r\n  9 使用 AuthRoute 组件配置路由规则，验证能否实现页面的登录访问控制。\r\n*/\r\n\r\n// <AuthRoute path=\"...\" component={...}></AuthRoute>\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        const isLogin = isAuth()\r\n\r\n        if (isLogin) {\r\n          // 已登录\r\n          // 将 props 传递给组件，组件中才能获取到路由相关信息\r\n          return <Component {...props} />\r\n        } else {\r\n          // 未登录\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/login',\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n"]},"metadata":{},"sourceType":"module"}