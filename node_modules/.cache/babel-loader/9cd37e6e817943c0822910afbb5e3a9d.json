{"ast":null,"code":"import \"antd-mobile/lib/toast/style/css\";\nimport _Toast from \"antd-mobile/lib/toast\";\nvar _jsxFileName = \"E:\\\\react-project\\\\hkzf-mobile\\\\src\\\\pages\\\\Map\\\\index.js\";\nimport React from 'react'; // 导入axios\n// import axios from 'axios'\n\nimport { API } from '../../utils/api';\nimport { Link } from 'react-router-dom';\n// 导入BASE_URL\nimport { BASE_URL } from '../../utils/url'; // 导入封装好的 NavHeader 组件\n\nimport NavHeader from '../../components/NavHeader'; // 导入 HouseItem 组件\n\nimport HouseItem from '../../components/HouseItem'; // 导入样式\n// import './index.scss'\n\nimport styles from './index.module.css'; // 解决脚手架中全局变量访问的问题\n\nconst BMap = window.BMap; // 覆盖物样式\n\nconst labelStyle = {\n  cursor: 'pointer',\n  border: '0px solid rgb(255, 0, 0)',\n  padding: '0px',\n  whiteSpace: 'nowrap',\n  fontSize: '12px',\n  color: 'rgb(255, 255, 255)',\n  textAlign: 'center'\n};\nexport default class Map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // 小区下的房源列表\n      housesList: [],\n      // 表示是否展示房源列表\n      isShowList: false\n    };\n  }\n\n  componentDidMount() {\n    this.initMap();\n  } // 初始化地图\n\n\n  initMap() {\n    // 获取当前定位城市\n    const _JSON$parse = JSON.parse(localStorage.getItem('hkzf_city')),\n          label = _JSON$parse.label,\n          value = _JSON$parse.value; // 初始化地图实例\n\n\n    const map = new BMap.Map('container'); // 作用：能够在其他方法中通过 this 来获取到地图对象\n\n    this.map = map; // 创建地址解析器实例\n\n    const myGeo = new BMap.Geocoder(); // 将地址解析结果显示在地图上，并调整地图视野\n\n    myGeo.getPoint(label, async point => {\n      if (point) {\n        //  初始化地图\n        map.centerAndZoom(point, 11); // 添加常用控件\n\n        map.addControl(new BMap.NavigationControl());\n        map.addControl(new BMap.ScaleControl()); // 调用 renderOverlays 方法\n\n        this.renderOverlays(value);\n      }\n    }, label); // 给地图绑定移动事件\n\n    map.addEventListener('movestart', () => {\n      // console.log('movestart')\n      if (this.state.isShowList) {\n        this.setState({\n          isShowList: false\n        });\n      }\n    });\n  } // 渲染覆盖物入口\n  // 1 接收区域 id 参数，获取该区域下的房源数据\n  // 2 获取房源类型以及下级地图缩放级别\n\n\n  async renderOverlays(id) {\n    try {\n      // 开启loading\n      _Toast.loading('加载中...', 0, null, false);\n\n      const res = await API.get(\"/area/map?id=\".concat(id)); // 关闭 loading\n\n      _Toast.hide();\n\n      const data = res.data.body; // 调用 getTypeAndZoom 方法获取级别和类型\n\n      const _this$getTypeAndZoom = this.getTypeAndZoom(),\n            nextZoom = _this$getTypeAndZoom.nextZoom,\n            type = _this$getTypeAndZoom.type;\n\n      data.forEach(item => {\n        // 创建覆盖物\n        this.createOverlays(item, nextZoom, type);\n      });\n    } catch (e) {\n      // 关闭 loading\n      _Toast.hide();\n    }\n  } // 计算要绘制的覆盖物类型和下一个缩放级别\n  // 区   -> 11 ，范围：>=10 <12\n  // 镇   -> 13 ，范围：>=12 <14\n  // 小区 -> 15 ，范围：>=14 <16\n\n\n  getTypeAndZoom() {\n    // 调用地图的 getZoom() 方法，来获取当前缩放级别\n    const zoom = this.map.getZoom();\n    let nextZoom, type; // console.log('当前地图缩放级别：', zoom)\n\n    if (zoom >= 10 && zoom < 12) {\n      // 区\n      // 下一个缩放级别\n      nextZoom = 13; // circle 表示绘制圆形覆盖物（区、镇）\n\n      type = 'circle';\n    } else if (zoom >= 12 && zoom < 14) {\n      // 镇\n      nextZoom = 15;\n      type = 'circle';\n    } else if (zoom >= 14 && zoom < 16) {\n      // 小区\n      type = 'rect';\n    }\n\n    return {\n      nextZoom,\n      type\n    };\n  } // 创建覆盖物\n\n\n  createOverlays(data, zoom, type) {\n    const _data$coord = data.coord,\n          longitude = _data$coord.longitude,\n          latitude = _data$coord.latitude,\n          areaName = data.label,\n          count = data.count,\n          value = data.value; // 创建坐标对象\n\n    const areaPoint = new BMap.Point(longitude, latitude);\n\n    if (type === 'circle') {\n      // 区或镇\n      this.createCircle(areaPoint, areaName, count, value, zoom);\n    } else {\n      // 小区\n      this.createRect(areaPoint, areaName, count, value);\n    }\n  } // 创建区、镇覆盖物\n\n\n  createCircle(point, name, count, id, zoom) {\n    // 创建覆盖物\n    const label = new BMap.Label('', {\n      position: point,\n      offset: new BMap.Size(-35, -35)\n    }); // 给 label 对象添加一个唯一标识\n\n    label.id = id; // 设置房源覆盖物内容\n\n    label.setContent(\"\\n      <div class=\\\"\".concat(styles.bubble, \"\\\">\\n        <p class=\\\"\").concat(styles.name, \"\\\">\").concat(name, \"</p>\\n        <p>\").concat(count, \"\\u5957</p>\\n      </div>\\n    \")); // 设置样式\n\n    label.setStyle(labelStyle); // 添加单击事件\n\n    label.addEventListener('click', () => {\n      // 调用 renderOverlays 方法，获取该区域下的房源数据\n      this.renderOverlays(id); // 放大地图，以当前点击的覆盖物为中心放大地图\n\n      this.map.centerAndZoom(point, zoom); // 解决清除覆盖物时，百度地图API的JS文件自身报错的问题\n\n      setTimeout(() => {\n        // 清除当前覆盖物信息\n        this.map.clearOverlays();\n      }, 0);\n    }); // 添加覆盖物到地图中\n\n    this.map.addOverlay(label);\n  } // 创建小区覆盖物\n\n\n  createRect(point, name, count, id) {\n    // 创建覆盖物\n    const label = new BMap.Label('', {\n      position: point,\n      offset: new BMap.Size(-50, -28)\n    }); // 给 label 对象添加一个唯一标识\n\n    label.id = id; // 设置房源覆盖物内容\n\n    label.setContent(\"\\n      <div class=\\\"\".concat(styles.rect, \"\\\">\\n        <span class=\\\"\").concat(styles.housename, \"\\\">\").concat(name, \"</span>\\n        <span class=\\\"\").concat(styles.housenum, \"\\\">\").concat(count, \"\\u5957</span>\\n        <i class=\\\"\").concat(styles.arrow, \"\\\"></i>\\n      </div>\\n    \")); // 设置样式\n\n    label.setStyle(labelStyle); // 添加单击事件\n\n    label.addEventListener('click', e => {\n      // 获取并渲染房源数据\n      this.getHousesList(id); // 获取当前被点击项\n\n      const target = e.changedTouches[0];\n      this.map.panBy(window.innerWidth / 2 - target.clientX, (window.innerHeight - 330) / 2 - target.clientY);\n    }); // 添加覆盖物到地图中\n\n    this.map.addOverlay(label);\n  } // 获取小区房源数据\n\n\n  async getHousesList(id) {\n    try {\n      // 开启loading\n      _Toast.loading('加载中...', 0, null, false);\n\n      const res = await API.get(\"/houses?cityId=\".concat(id)); // 关闭 loading\n\n      _Toast.hide();\n\n      this.setState({\n        housesList: res.data.body.list,\n        // 展示房源列表\n        isShowList: true\n      });\n    } catch (e) {\n      // 关闭 loading\n      _Toast.hide();\n    }\n  } // 封装渲染房屋列表的方法\n\n\n  renderHousesList() {\n    return this.state.housesList.map(item => React.createElement(HouseItem, {\n      onClick: () => this.props.history.push(\"/detail/\".concat(item.houseCode)),\n      key: item.houseCode,\n      src: BASE_URL + item.houseImg,\n      title: item.title,\n      desc: item.desc,\n      tags: item.tags,\n      price: item.price,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    })); // return this.state.housesList.map(item => (\n    //   <div className={styles.house} key={item.houseCode}>\n    //     <div className={styles.imgWrap}>\n    //       <img className={styles.img} src={BASE_URL + item.houseImg} alt=\"\" />\n    //     </div>\n    //     <div className={styles.content}>\n    //       <h3 className={styles.title}>{item.title}</h3>\n    //       <div className={styles.desc}>{item.desc}</div>\n    //       <div>\n    //         {/* ['近地铁', '随时看房'] */}\n    //         {item.tags.map((tag, index) => {\n    //           const tagClass = 'tag' + (index + 1)\n    //           return (\n    //             <span\n    //               className={[styles.tag, styles[tagClass]].join(' ')}\n    //               key={tag}\n    //             >\n    //               {tag}\n    //             </span>\n    //           )\n    //         })}\n    //       </div>\n    //       <div className={styles.price}>\n    //         <span className={styles.priceNum}>{item.price}</span> 元/月\n    //       </div>\n    //     </div>\n    //   </div>\n    // ))\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.map,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(NavHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"\\u5730\\u56FE\\u627E\\u623F\"), React.createElement(\"div\", {\n      id: \"container\",\n      className: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: [styles.houseList, this.state.isShowList ? styles.show : ''].join(' '),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.titleWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: styles.listTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"\\u623F\\u5C4B\\u5217\\u8868\"), React.createElement(Link, {\n      className: styles.titleMore,\n      to: \"/home/list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"\\u66F4\\u591A\\u623F\\u6E90\")), React.createElement(\"div\", {\n      className: styles.houseItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, this.renderHousesList())));\n  }\n\n}","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\pages\\Map\\index.js"],"names":["React","API","Link","BASE_URL","NavHeader","HouseItem","styles","BMap","window","labelStyle","cursor","border","padding","whiteSpace","fontSize","color","textAlign","Map","Component","state","housesList","isShowList","componentDidMount","initMap","JSON","parse","localStorage","getItem","label","value","map","myGeo","Geocoder","getPoint","point","centerAndZoom","addControl","NavigationControl","ScaleControl","renderOverlays","addEventListener","setState","id","loading","res","get","hide","data","body","getTypeAndZoom","nextZoom","type","forEach","item","createOverlays","e","zoom","getZoom","coord","longitude","latitude","areaName","count","areaPoint","Point","createCircle","createRect","name","Label","position","offset","Size","setContent","bubble","setStyle","setTimeout","clearOverlays","addOverlay","rect","housename","housenum","arrow","getHousesList","target","changedTouches","panBy","innerWidth","clientX","innerHeight","clientY","list","renderHousesList","props","history","push","houseCode","houseImg","title","desc","tags","price","render","container","houseList","show","join","titleWrap","listTitle","titleMore","houseItems"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\n// 导入axios\r\n// import axios from 'axios'\r\nimport { API } from '../../utils/api'\r\nimport { Link } from 'react-router-dom'\r\nimport { Toast } from 'antd-mobile'\r\n\r\n// 导入BASE_URL\r\nimport { BASE_URL } from '../../utils/url'\r\n\r\n// 导入封装好的 NavHeader 组件\r\nimport NavHeader from '../../components/NavHeader'\r\n\r\n// 导入 HouseItem 组件\r\nimport HouseItem from '../../components/HouseItem'\r\n\r\n// 导入样式\r\n// import './index.scss'\r\nimport styles from './index.module.css'\r\n\r\n// 解决脚手架中全局变量访问的问题\r\nconst BMap = window.BMap\r\n\r\n// 覆盖物样式\r\nconst labelStyle = {\r\n  cursor: 'pointer',\r\n  border: '0px solid rgb(255, 0, 0)',\r\n  padding: '0px',\r\n  whiteSpace: 'nowrap',\r\n  fontSize: '12px',\r\n  color: 'rgb(255, 255, 255)',\r\n  textAlign: 'center'\r\n}\r\n\r\nexport default class Map extends React.Component {\r\n  state = {\r\n    // 小区下的房源列表\r\n    housesList: [],\r\n    // 表示是否展示房源列表\r\n    isShowList: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initMap()\r\n  }\r\n\r\n  // 初始化地图\r\n  initMap() {\r\n    // 获取当前定位城市\r\n    const { label, value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n    // 初始化地图实例\r\n    const map = new BMap.Map('container')\r\n    // 作用：能够在其他方法中通过 this 来获取到地图对象\r\n    this.map = map\r\n    // 创建地址解析器实例\r\n    const myGeo = new BMap.Geocoder()\r\n    // 将地址解析结果显示在地图上，并调整地图视野\r\n    myGeo.getPoint(\r\n      label,\r\n      async point => {\r\n        if (point) {\r\n          //  初始化地图\r\n          map.centerAndZoom(point, 11)\r\n          // 添加常用控件\r\n          map.addControl(new BMap.NavigationControl())\r\n          map.addControl(new BMap.ScaleControl())\r\n\r\n          // 调用 renderOverlays 方法\r\n          this.renderOverlays(value)\r\n        }\r\n      },\r\n      label\r\n    )\r\n\r\n    // 给地图绑定移动事件\r\n    map.addEventListener('movestart', () => {\r\n      // console.log('movestart')\r\n      if (this.state.isShowList) {\r\n        this.setState({\r\n          isShowList: false\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  // 渲染覆盖物入口\r\n  // 1 接收区域 id 参数，获取该区域下的房源数据\r\n  // 2 获取房源类型以及下级地图缩放级别\r\n  async renderOverlays(id) {\r\n    try {\r\n      // 开启loading\r\n      Toast.loading('加载中...', 0, null, false)\r\n\r\n      const res = await API.get(`/area/map?id=${id}`)\r\n      // 关闭 loading\r\n      Toast.hide()\r\n\r\n      const data = res.data.body\r\n\r\n      // 调用 getTypeAndZoom 方法获取级别和类型\r\n      const { nextZoom, type } = this.getTypeAndZoom()\r\n\r\n      data.forEach(item => {\r\n        // 创建覆盖物\r\n        this.createOverlays(item, nextZoom, type)\r\n      })\r\n    } catch (e) {\r\n      // 关闭 loading\r\n      Toast.hide()\r\n    }\r\n  }\r\n\r\n  // 计算要绘制的覆盖物类型和下一个缩放级别\r\n  // 区   -> 11 ，范围：>=10 <12\r\n  // 镇   -> 13 ，范围：>=12 <14\r\n  // 小区 -> 15 ，范围：>=14 <16\r\n  getTypeAndZoom() {\r\n    // 调用地图的 getZoom() 方法，来获取当前缩放级别\r\n    const zoom = this.map.getZoom()\r\n    let nextZoom, type\r\n\r\n    // console.log('当前地图缩放级别：', zoom)\r\n    if (zoom >= 10 && zoom < 12) {\r\n      // 区\r\n      // 下一个缩放级别\r\n      nextZoom = 13\r\n      // circle 表示绘制圆形覆盖物（区、镇）\r\n      type = 'circle'\r\n    } else if (zoom >= 12 && zoom < 14) {\r\n      // 镇\r\n      nextZoom = 15\r\n      type = 'circle'\r\n    } else if (zoom >= 14 && zoom < 16) {\r\n      // 小区\r\n      type = 'rect'\r\n    }\r\n\r\n    return {\r\n      nextZoom,\r\n      type\r\n    }\r\n  }\r\n\r\n  // 创建覆盖物\r\n  createOverlays(data, zoom, type) {\r\n    const {\r\n      coord: { longitude, latitude },\r\n      label: areaName,\r\n      count,\r\n      value\r\n    } = data\r\n\r\n    // 创建坐标对象\r\n    const areaPoint = new BMap.Point(longitude, latitude)\r\n\r\n    if (type === 'circle') {\r\n      // 区或镇\r\n      this.createCircle(areaPoint, areaName, count, value, zoom)\r\n    } else {\r\n      // 小区\r\n      this.createRect(areaPoint, areaName, count, value)\r\n    }\r\n  }\r\n\r\n  // 创建区、镇覆盖物\r\n  createCircle(point, name, count, id, zoom) {\r\n    // 创建覆盖物\r\n    const label = new BMap.Label('', {\r\n      position: point,\r\n      offset: new BMap.Size(-35, -35)\r\n    })\r\n\r\n    // 给 label 对象添加一个唯一标识\r\n    label.id = id\r\n\r\n    // 设置房源覆盖物内容\r\n    label.setContent(`\r\n      <div class=\"${styles.bubble}\">\r\n        <p class=\"${styles.name}\">${name}</p>\r\n        <p>${count}套</p>\r\n      </div>\r\n    `)\r\n\r\n    // 设置样式\r\n    label.setStyle(labelStyle)\r\n\r\n    // 添加单击事件\r\n    label.addEventListener('click', () => {\r\n      // 调用 renderOverlays 方法，获取该区域下的房源数据\r\n      this.renderOverlays(id)\r\n\r\n      // 放大地图，以当前点击的覆盖物为中心放大地图\r\n      this.map.centerAndZoom(point, zoom)\r\n\r\n      // 解决清除覆盖物时，百度地图API的JS文件自身报错的问题\r\n      setTimeout(() => {\r\n        // 清除当前覆盖物信息\r\n        this.map.clearOverlays()\r\n      }, 0)\r\n    })\r\n\r\n    // 添加覆盖物到地图中\r\n    this.map.addOverlay(label)\r\n  }\r\n\r\n  // 创建小区覆盖物\r\n  createRect(point, name, count, id) {\r\n    // 创建覆盖物\r\n    const label = new BMap.Label('', {\r\n      position: point,\r\n      offset: new BMap.Size(-50, -28)\r\n    })\r\n\r\n    // 给 label 对象添加一个唯一标识\r\n    label.id = id\r\n\r\n    // 设置房源覆盖物内容\r\n    label.setContent(`\r\n      <div class=\"${styles.rect}\">\r\n        <span class=\"${styles.housename}\">${name}</span>\r\n        <span class=\"${styles.housenum}\">${count}套</span>\r\n        <i class=\"${styles.arrow}\"></i>\r\n      </div>\r\n    `)\r\n\r\n    // 设置样式\r\n    label.setStyle(labelStyle)\r\n\r\n    // 添加单击事件\r\n    label.addEventListener('click', e => {\r\n      // 获取并渲染房源数据\r\n      this.getHousesList(id)\r\n\r\n      // 获取当前被点击项\r\n      const target = e.changedTouches[0]\r\n      this.map.panBy(\r\n        window.innerWidth / 2 - target.clientX,\r\n        (window.innerHeight - 330) / 2 - target.clientY\r\n      )\r\n    })\r\n\r\n    // 添加覆盖物到地图中\r\n    this.map.addOverlay(label)\r\n  }\r\n\r\n  // 获取小区房源数据\r\n  async getHousesList(id) {\r\n    try {\r\n      // 开启loading\r\n      Toast.loading('加载中...', 0, null, false)\r\n\r\n      const res = await API.get(`/houses?cityId=${id}`)\r\n      // 关闭 loading\r\n      Toast.hide()\r\n\r\n      this.setState({\r\n        housesList: res.data.body.list,\r\n        // 展示房源列表\r\n        isShowList: true\r\n      })\r\n    } catch (e) {\r\n      // 关闭 loading\r\n      Toast.hide()\r\n    }\r\n  }\r\n\r\n  // 封装渲染房屋列表的方法\r\n  renderHousesList() {\r\n    return this.state.housesList.map(item => (\r\n      <HouseItem\r\n        onClick={() => this.props.history.push(`/detail/${item.houseCode}`)}\r\n        key={item.houseCode}\r\n        src={BASE_URL + item.houseImg}\r\n        title={item.title}\r\n        desc={item.desc}\r\n        tags={item.tags}\r\n        price={item.price}\r\n      />\r\n    ))\r\n\r\n    // return this.state.housesList.map(item => (\r\n    //   <div className={styles.house} key={item.houseCode}>\r\n    //     <div className={styles.imgWrap}>\r\n    //       <img className={styles.img} src={BASE_URL + item.houseImg} alt=\"\" />\r\n    //     </div>\r\n    //     <div className={styles.content}>\r\n    //       <h3 className={styles.title}>{item.title}</h3>\r\n    //       <div className={styles.desc}>{item.desc}</div>\r\n    //       <div>\r\n    //         {/* ['近地铁', '随时看房'] */}\r\n    //         {item.tags.map((tag, index) => {\r\n    //           const tagClass = 'tag' + (index + 1)\r\n    //           return (\r\n    //             <span\r\n    //               className={[styles.tag, styles[tagClass]].join(' ')}\r\n    //               key={tag}\r\n    //             >\r\n    //               {tag}\r\n    //             </span>\r\n    //           )\r\n    //         })}\r\n    //       </div>\r\n    //       <div className={styles.price}>\r\n    //         <span className={styles.priceNum}>{item.price}</span> 元/月\r\n    //       </div>\r\n    //     </div>\r\n    //   </div>\r\n    // ))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.map}>\r\n        {/* 顶部导航栏组件 */}\r\n        <NavHeader>地图找房</NavHeader>\r\n        {/* 地图容器元素 */}\r\n        <div id=\"container\" className={styles.container} />\r\n\r\n        {/* 房源列表 */}\r\n        {/* 添加 styles.show 展示房屋列表 */}\r\n        <div\r\n          className={[\r\n            styles.houseList,\r\n            this.state.isShowList ? styles.show : ''\r\n          ].join(' ')}\r\n        >\r\n          <div className={styles.titleWrap}>\r\n            <h1 className={styles.listTitle}>房屋列表</h1>\r\n            <Link className={styles.titleMore} to=\"/home/list\">\r\n              更多房源\r\n            </Link>\r\n          </div>\r\n\r\n          <div className={styles.houseItems}>\r\n            {/* 房屋结构 */}\r\n            {this.renderHousesList()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}