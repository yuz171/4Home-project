{"ast":null,"code":"import \"antd-mobile/lib/flex/style/css\";\nimport _Flex from \"antd-mobile/lib/flex\";\nimport \"antd-mobile/lib/toast/style/css\";\nimport _Toast from \"antd-mobile/lib/toast\";\nimport _objectSpread from \"E:\\\\react-project\\\\hkzf-mobile\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"E:\\\\react-project\\\\hkzf-mobile\\\\src\\\\pages\\\\HouseList\\\\index.js\";\nimport React from 'react';\nimport { List, AutoSizer, WindowScroller, InfiniteLoader } from 'react-virtualized';\nimport { API } from '../../utils/api';\nimport { BASE_URL } from '../../utils/url';\nimport { getCurrentCity } from '../../utils'; // 导入搜索导航栏组件\n\nimport SearchHeader from '../../components/SearchHeader';\nimport Filter from './components/Filter';\nimport HouseItem from '../../components/HouseItem'; // 导入吸顶组件\n\nimport Sticky from '../../components/Sticky';\nimport NoHouse from '../../components/NoHouse'; // 导入样式\n\nimport styles from './index.module.css'; // 获取当前定位城市信息\n// const { label, value } = JSON.parse(localStorage.getItem('hkzf_city'))\n\nexport default class HouseList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // 列表数据\n      list: [],\n      // 总条数\n      count: 0,\n      // 数据是否加载中\n      isLoading: false // 初始化默认值\n\n    };\n    this.label = '';\n    this.value = '';\n    this.filters = {};\n\n    this.onFilter = filters => {\n      // 返回页面顶部\n      window.scrollTo(0, 0);\n      this.filters = filters; // 调用获取房屋数据的方法\n\n      this.searchHouseList();\n    };\n\n    this.renderHouseList = ({\n      key,\n      index,\n      style\n    }) => {\n      // 根据索引号来获取当前这一行的房屋数据\n      const list = this.state.list;\n      const house = list[index]; // 判断 house 是否存在\n      // 如果不存在，就渲染 loading 元素占位\n\n      if (!house) {\n        return React.createElement(\"div\", {\n          key: key,\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: styles.loading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(HouseItem, {\n        key: key,\n        onClick: () => this.props.history.push(\"/detail/\".concat(house.houseCode)) // 注意：该组件中应该接收 style，然后给组件元素设置样式！！！\n        ,\n        style: style,\n        src: BASE_URL + house.houseImg,\n        title: house.title,\n        desc: house.desc,\n        tags: house.tags,\n        price: house.price,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      });\n    };\n\n    this.isRowLoaded = ({\n      index\n    }) => {\n      return !!this.state.list[index];\n    };\n\n    this.loadMoreRows = ({\n      startIndex,\n      stopIndex\n    }) => {\n      return new Promise(resolve => {\n        API.get('/houses', {\n          params: _objectSpread({\n            cityId: this.value\n          }, this.filters, {\n            start: startIndex,\n            end: stopIndex\n          })\n        }).then(res => {\n          // console.log('loadMoreRows：', res)\n          this.setState({\n            list: [...this.state.list, ...res.data.body.list]\n          }); // 数据加载完成时，调用 resolve 即可\n\n          resolve();\n        });\n      });\n    };\n  }\n\n  async componentDidMount() {\n    // console.log('HouseList -> did mount')\n    const _ref = await getCurrentCity(),\n          label = _ref.label,\n          value = _ref.value;\n\n    this.label = label;\n    this.value = value;\n    this.searchHouseList();\n  } // 用来获取房屋列表数据\n\n\n  async searchHouseList() {\n    // 获取当前定位城市id\n    this.setState({\n      isLoading: true\n    }); // 开启loading\n\n    _Toast.loading('加载中...', 0, null, false);\n\n    const res = await API.get('/houses', {\n      params: _objectSpread({\n        cityId: this.value\n      }, this.filters, {\n        start: 1,\n        end: 20\n      })\n    });\n    const _res$data$body = res.data.body,\n          list = _res$data$body.list,\n          count = _res$data$body.count; // 关闭loading\n\n    _Toast.hide(); // 提示房源数量\n    // 解决了没有房源数据时，也弹窗提示的bug\n\n\n    if (count !== 0) {\n      _Toast.info(\"\\u5171\\u627E\\u5230 \".concat(count, \" \\u5957\\u623F\\u6E90\"), 2, null, false);\n    }\n\n    this.setState({\n      list,\n      count,\n      // 数据加载完成的状态\n      isLoading: false\n    });\n  } // 接收 Filter 组件中的筛选条件数据\n\n\n  // 渲染列表数据\n  renderList() {\n    const _this$state = this.state,\n          count = _this$state.count,\n          isLoading = _this$state.isLoading; // 关键点：在数据加载完成后，再进行 count 的判断\n    // 解决方式：如果数据加载中，则不展示 NoHouse 组件；而，但数据加载完成后，再展示 NoHouse 组件\n\n    if (count === 0 && !isLoading) {\n      return React.createElement(NoHouse, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"\\u6CA1\\u6709\\u627E\\u5230\\u623F\\u6E90\\uFF0C\\u8BF7\\u60A8\\u6362\\u4E2A\\u641C\\u7D22\\u6761\\u4EF6\\u5427~\");\n    }\n\n    return React.createElement(InfiniteLoader, {\n      isRowLoaded: this.isRowLoaded,\n      loadMoreRows: this.loadMoreRows,\n      rowCount: count,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, ({\n      onRowsRendered,\n      registerChild\n    }) => React.createElement(WindowScroller, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, ({\n      height,\n      isScrolling,\n      scrollTop\n    }) => React.createElement(AutoSizer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, ({\n      width\n    }) => React.createElement(List, {\n      onRowsRendered: onRowsRendered,\n      ref: registerChild,\n      autoHeight: true // 设置高度为 WindowScroller 最终渲染的列表高度\n      ,\n      width: width // 视口的宽度\n      ,\n      height: height // 视口的高度\n      ,\n      rowCount: count // List列表项的行数\n      ,\n      rowHeight: 120 // 每一行的高度\n      ,\n      rowRenderer: this.renderHouseList // 渲染列表项中的每一行\n      ,\n      isScrolling: isScrolling,\n      scrollTop: scrollTop,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(_Flex, {\n      className: styles.header,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"iconfont icon-back\",\n      onClick: () => this.props.history.go(-1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(SearchHeader, {\n      cityName: this.label,\n      className: styles.searchHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(Sticky, {\n      height: 40,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Filter, {\n      onFilter: this.onFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: styles.houseItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.renderList()));\n  }\n\n}","map":{"version":3,"sources":["E:\\react-project\\hkzf-mobile\\src\\pages\\HouseList\\index.js"],"names":["React","List","AutoSizer","WindowScroller","InfiniteLoader","API","BASE_URL","getCurrentCity","SearchHeader","Filter","HouseItem","Sticky","NoHouse","styles","HouseList","Component","state","list","count","isLoading","label","value","filters","onFilter","window","scrollTo","searchHouseList","renderHouseList","key","index","style","house","loading","props","history","push","houseCode","houseImg","title","desc","tags","price","isRowLoaded","loadMoreRows","startIndex","stopIndex","Promise","resolve","get","params","cityId","start","end","then","res","setState","data","body","componentDidMount","hide","info","renderList","onRowsRendered","registerChild","height","isScrolling","scrollTop","width","render","root","header","go","searchHeader","houseItems"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SACEC,IADF,EAEEC,SAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,mBALP;AAOA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,cAAT,QAA+B,aAA/B,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,oBAAnB,C,CAEA;AACA;;AAEA,eAAe,MAAMC,SAAN,SAAwBd,KAAK,CAACe,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACrDC,KADqD,GAC7C;AACN;AACAC,MAAAA,IAAI,EAAE,EAFA;AAGN;AACAC,MAAAA,KAAK,EAAE,CAJD;AAKN;AACAC,MAAAA,SAAS,EAAE,KANL,CASR;;AATQ,KAD6C;AAAA,SAWrDC,KAXqD,GAW7C,EAX6C;AAAA,SAYrDC,KAZqD,GAY7C,EAZ6C;AAAA,SAerDC,OAfqD,GAe3C,EAf2C;;AAAA,SA8DrDC,QA9DqD,GA8D1CD,OAAO,IAAI;AACpB;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACA,WAAKH,OAAL,GAAeA,OAAf,CAHoB,CAKpB;;AACA,WAAKI,eAAL;AACD,KArEoD;;AAAA,SAwErDC,eAxEqD,GAwEnC,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAD,KAA2B;AAC3C;AAD2C,YAEnCb,IAFmC,GAE1B,KAAKD,KAFqB,CAEnCC,IAFmC;AAG3C,YAAMc,KAAK,GAAGd,IAAI,CAACY,KAAD,CAAlB,CAH2C,CAK3C;AACA;;AACA,UAAI,CAACE,KAAL,EAAY;AACV,eACE;AAAK,UAAA,GAAG,EAAEH,GAAV;AAAe,UAAA,KAAK,EAAEE,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,SAAS,EAAEjB,MAAM,CAACmB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAKD;;AAED,aACE,oBAAC,SAAD;AACE,QAAA,GAAG,EAAEJ,GADP;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKK,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,mBAAmCJ,KAAK,CAACK,SAAzC,EAFjB,CAGE;AAHF;AAIE,QAAA,KAAK,EAAEN,KAJT;AAKE,QAAA,GAAG,EAAExB,QAAQ,GAAGyB,KAAK,CAACM,QALxB;AAME,QAAA,KAAK,EAAEN,KAAK,CAACO,KANf;AAOE,QAAA,IAAI,EAAEP,KAAK,CAACQ,IAPd;AAQE,QAAA,IAAI,EAAER,KAAK,CAACS,IARd;AASE,QAAA,KAAK,EAAET,KAAK,CAACU,KATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD,KApGoD;;AAAA,SAuGrDC,WAvGqD,GAuGvC,CAAC;AAAEb,MAAAA;AAAF,KAAD,KAAe;AAC3B,aAAO,CAAC,CAAC,KAAKb,KAAL,CAAWC,IAAX,CAAgBY,KAAhB,CAAT;AACD,KAzGoD;;AAAA,SA6GrDc,YA7GqD,GA6GtC,CAAC;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAD,KAA+B;AAC5C,aAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B1C,QAAAA,GAAG,CAAC2C,GAAJ,CAAQ,SAAR,EAAmB;AACjBC,UAAAA,MAAM;AACJC,YAAAA,MAAM,EAAE,KAAK7B;AADT,aAED,KAAKC,OAFJ;AAGJ6B,YAAAA,KAAK,EAAEP,UAHH;AAIJQ,YAAAA,GAAG,EAAEP;AAJD;AADW,SAAnB,EAOGQ,IAPH,CAOQC,GAAG,IAAI;AACb;AACA,eAAKC,QAAL,CAAc;AACZtC,YAAAA,IAAI,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,IAAf,EAAqB,GAAGqC,GAAG,CAACE,IAAJ,CAASC,IAAT,CAAcxC,IAAtC;AADM,WAAd,EAFa,CAMb;;AACA8B,UAAAA,OAAO;AACR,SAfD;AAgBD,OAjBM,CAAP;AAkBD,KAhIoD;AAAA;;AAiBrD,QAAMW,iBAAN,GAA0B;AACxB;AADwB,iBAEC,MAAMnD,cAAc,EAFrB;AAAA,UAEhBa,KAFgB,QAEhBA,KAFgB;AAAA,UAETC,KAFS,QAETA,KAFS;;AAGxB,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AAEA,SAAKK,eAAL;AACD,GAxBoD,CA0BrD;;;AACA,QAAMA,eAAN,GAAwB;AACtB;AACA,SAAK6B,QAAL,CAAc;AACZpC,MAAAA,SAAS,EAAE;AADC,KAAd,EAFsB,CAMtB;;AACA,WAAMa,OAAN,CAAc,QAAd,EAAwB,CAAxB,EAA2B,IAA3B,EAAiC,KAAjC;;AACA,UAAMsB,GAAG,GAAG,MAAMjD,GAAG,CAAC2C,GAAJ,CAAQ,SAAR,EAAmB;AACnCC,MAAAA,MAAM;AACJC,QAAAA,MAAM,EAAE,KAAK7B;AADT,SAED,KAAKC,OAFJ;AAGJ6B,QAAAA,KAAK,EAAE,CAHH;AAIJC,QAAAA,GAAG,EAAE;AAJD;AAD6B,KAAnB,CAAlB;AARsB,2BAgBEE,GAAG,CAACE,IAAJ,CAASC,IAhBX;AAAA,UAgBdxC,IAhBc,kBAgBdA,IAhBc;AAAA,UAgBRC,KAhBQ,kBAgBRA,KAhBQ,EAiBtB;;AACA,WAAMyC,IAAN,GAlBsB,CAoBtB;AACA;;;AACA,QAAIzC,KAAK,KAAK,CAAd,EAAiB;AACf,aAAM0C,IAAN,8BAAkB1C,KAAlB,0BAA+B,CAA/B,EAAkC,IAAlC,EAAwC,KAAxC;AACD;;AAED,SAAKqC,QAAL,CAAc;AACZtC,MAAAA,IADY;AAEZC,MAAAA,KAFY;AAGZ;AACAC,MAAAA,SAAS,EAAE;AAJC,KAAd;AAMD,GA3DoD,CA6DrD;;;AAqEA;AACA0C,EAAAA,UAAU,GAAG;AAAA,wBACkB,KAAK7C,KADvB;AAAA,UACHE,KADG,eACHA,KADG;AAAA,UACIC,SADJ,eACIA,SADJ,EAEX;AACA;;AACA,QAAID,KAAK,KAAK,CAAV,IAAe,CAACC,SAApB,EAA+B;AAC7B,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GAAP;AACD;;AAED,WACE,oBAAC,cAAD;AACE,MAAA,WAAW,EAAE,KAAKuB,WADpB;AAEE,MAAA,YAAY,EAAE,KAAKC,YAFrB;AAGE,MAAA,QAAQ,EAAEzB,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,CAAC;AAAE4C,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,KAAD,KACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,WAAV;AAAuBC,MAAAA;AAAvB,KAAD,KACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KACC,oBAAC,IAAD;AACE,MAAA,cAAc,EAAEL,cADlB;AAEE,MAAA,GAAG,EAAEC,aAFP;AAGE,MAAA,UAAU,MAHZ,CAGa;AAHb;AAIE,MAAA,KAAK,EAAEI,KAJT,CAIgB;AAJhB;AAKE,MAAA,MAAM,EAAEH,MALV,CAKkB;AALlB;AAME,MAAA,QAAQ,EAAE9C,KANZ,CAMmB;AANnB;AAOE,MAAA,SAAS,EAAE,GAPb,CAOkB;AAPlB;AAQE,MAAA,WAAW,EAAE,KAAKS,eARpB,CAQqC;AARrC;AASE,MAAA,WAAW,EAAEsC,WATf;AAUE,MAAA,SAAS,EAAEC,SAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFJ,CANJ,CADF;AA8BD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAEvD,MAAM,CAACwD,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAM,MAAA,SAAS,EAAExD,MAAM,CAACyD,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,oBADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKrC,KAAL,CAAWC,OAAX,CAAmBqC,EAAnB,CAAsB,CAAC,CAAvB,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAKE,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAE,KAAKnD,KAA7B;AAAoC,MAAA,SAAS,EAAEP,MAAM,CAAC2D,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAFF,EAWE,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,KAAKjD,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAXF,EAgBE;AAAK,MAAA,SAAS,EAAEV,MAAM,CAAC4D,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKZ,UAAL,EAApC,CAhBF,CADF;AAoBD;;AAhMoD","sourcesContent":["import React from 'react'\r\n\r\nimport { Flex, Toast } from 'antd-mobile'\r\n\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  WindowScroller,\r\n  InfiniteLoader\r\n} from 'react-virtualized'\r\n\r\nimport { API } from '../../utils/api'\r\nimport { BASE_URL } from '../../utils/url'\r\nimport { getCurrentCity } from '../../utils'\r\n\r\n// 导入搜索导航栏组件\r\nimport SearchHeader from '../../components/SearchHeader'\r\nimport Filter from './components/Filter'\r\nimport HouseItem from '../../components/HouseItem'\r\n// 导入吸顶组件\r\nimport Sticky from '../../components/Sticky'\r\nimport NoHouse from '../../components/NoHouse'\r\n// 导入样式\r\nimport styles from './index.module.css'\r\n\r\n// 获取当前定位城市信息\r\n// const { label, value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n\r\nexport default class HouseList extends React.Component {\r\n  state = {\r\n    // 列表数据\r\n    list: [],\r\n    // 总条数\r\n    count: 0,\r\n    // 数据是否加载中\r\n    isLoading: false\r\n  }\r\n\r\n  // 初始化默认值\r\n  label = ''\r\n  value = ''\r\n\r\n  // 初始化实例属性\r\n  filters = {}\r\n\r\n  async componentDidMount() {\r\n    // console.log('HouseList -> did mount')\r\n    const { label, value } = await getCurrentCity()\r\n    this.label = label\r\n    this.value = value\r\n\r\n    this.searchHouseList()\r\n  }\r\n\r\n  // 用来获取房屋列表数据\r\n  async searchHouseList() {\r\n    // 获取当前定位城市id\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n\r\n    // 开启loading\r\n    Toast.loading('加载中...', 0, null, false)\r\n    const res = await API.get('/houses', {\r\n      params: {\r\n        cityId: this.value,\r\n        ...this.filters,\r\n        start: 1,\r\n        end: 20\r\n      }\r\n    })\r\n    const { list, count } = res.data.body\r\n    // 关闭loading\r\n    Toast.hide()\r\n\r\n    // 提示房源数量\r\n    // 解决了没有房源数据时，也弹窗提示的bug\r\n    if (count !== 0) {\r\n      Toast.info(`共找到 ${count} 套房源`, 2, null, false)\r\n    }\r\n\r\n    this.setState({\r\n      list,\r\n      count,\r\n      // 数据加载完成的状态\r\n      isLoading: false\r\n    })\r\n  }\r\n\r\n  // 接收 Filter 组件中的筛选条件数据\r\n  onFilter = filters => {\r\n    // 返回页面顶部\r\n    window.scrollTo(0, 0)\r\n    this.filters = filters\r\n\r\n    // 调用获取房屋数据的方法\r\n    this.searchHouseList()\r\n  }\r\n\r\n  // 渲染房屋列表项\r\n  renderHouseList = ({ key, index, style }) => {\r\n    // 根据索引号来获取当前这一行的房屋数据\r\n    const { list } = this.state\r\n    const house = list[index]\r\n\r\n    // 判断 house 是否存在\r\n    // 如果不存在，就渲染 loading 元素占位\r\n    if (!house) {\r\n      return (\r\n        <div key={key} style={style}>\r\n          <p className={styles.loading} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <HouseItem\r\n        key={key}\r\n        onClick={() => this.props.history.push(`/detail/${house.houseCode}`)}\r\n        // 注意：该组件中应该接收 style，然后给组件元素设置样式！！！\r\n        style={style}\r\n        src={BASE_URL + house.houseImg}\r\n        title={house.title}\r\n        desc={house.desc}\r\n        tags={house.tags}\r\n        price={house.price}\r\n      />\r\n    )\r\n  }\r\n\r\n  // 判断列表中的每一行是否加载完成\r\n  isRowLoaded = ({ index }) => {\r\n    return !!this.state.list[index]\r\n  }\r\n\r\n  // 用来获取更多房屋列表数据\r\n  // 注意：该方法的返回值是一个 Promise 对象，并且，这个对象应该在数据加载完成时，来调用 resolve 让Promise对象的状态变为已完成。\r\n  loadMoreRows = ({ startIndex, stopIndex }) => {\r\n    return new Promise(resolve => {\r\n      API.get('/houses', {\r\n        params: {\r\n          cityId: this.value,\r\n          ...this.filters,\r\n          start: startIndex,\r\n          end: stopIndex\r\n        }\r\n      }).then(res => {\r\n        // console.log('loadMoreRows：', res)\r\n        this.setState({\r\n          list: [...this.state.list, ...res.data.body.list]\r\n        })\r\n\r\n        // 数据加载完成时，调用 resolve 即可\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  // 渲染列表数据\r\n  renderList() {\r\n    const { count, isLoading } = this.state\r\n    // 关键点：在数据加载完成后，再进行 count 的判断\r\n    // 解决方式：如果数据加载中，则不展示 NoHouse 组件；而，但数据加载完成后，再展示 NoHouse 组件\r\n    if (count === 0 && !isLoading) {\r\n      return <NoHouse>没有找到房源，请您换个搜索条件吧~</NoHouse>\r\n    }\r\n\r\n    return (\r\n      <InfiniteLoader\r\n        isRowLoaded={this.isRowLoaded}\r\n        loadMoreRows={this.loadMoreRows}\r\n        rowCount={count}\r\n      >\r\n        {({ onRowsRendered, registerChild }) => (\r\n          <WindowScroller>\r\n            {({ height, isScrolling, scrollTop }) => (\r\n              <AutoSizer>\r\n                {({ width }) => (\r\n                  <List\r\n                    onRowsRendered={onRowsRendered}\r\n                    ref={registerChild}\r\n                    autoHeight // 设置高度为 WindowScroller 最终渲染的列表高度\r\n                    width={width} // 视口的宽度\r\n                    height={height} // 视口的高度\r\n                    rowCount={count} // List列表项的行数\r\n                    rowHeight={120} // 每一行的高度\r\n                    rowRenderer={this.renderHouseList} // 渲染列表项中的每一行\r\n                    isScrolling={isScrolling}\r\n                    scrollTop={scrollTop}\r\n                  />\r\n                )}\r\n              </AutoSizer>\r\n            )}\r\n          </WindowScroller>\r\n        )}\r\n      </InfiniteLoader>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* 顶部搜索导航 */}\r\n        <Flex className={styles.header}>\r\n          <i\r\n            className=\"iconfont icon-back\"\r\n            onClick={() => this.props.history.go(-1)}\r\n          />\r\n          <SearchHeader cityName={this.label} className={styles.searchHeader} />\r\n        </Flex>\r\n\r\n        {/* 条件筛选栏 */}\r\n        <Sticky height={40}>\r\n          <Filter onFilter={this.onFilter} />\r\n        </Sticky>\r\n\r\n        {/* 房屋列表 */}\r\n        <div className={styles.houseItems}>{this.renderList()}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}